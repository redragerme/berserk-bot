import os
import json
import random
import asyncio
from datetime import datetime, timedelta
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, CallbackQueryHandler,
                          ContextTypes, MessageHandler, filters)
from apscheduler.schedulers.background import BackgroundScheduler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –ó–∞–¥–∞—Ç—å –∫–∞–∫ env var –Ω–∞ Render
DATA_FILE = "database.json"
QUOTES_FILE = "assets/quotes.txt"
IMG_RANDOM = "assets/random/"
IMG_GUTS = "assets/guts/"
IMG_GRIFFITH = "assets/griffith/"

scheduler = BackgroundScheduler()
scheduler.start()

application = ApplicationBuilder().token(BOT_TOKEN).build()
web_app = Flask(__name__)

# === –ó–ê–ì–†–£–ó–ö–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–ï ===
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, 'r') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

def get_random_quote():
    with open(QUOTES_FILE, 'r') as f:
        quotes = [line.strip() for line in f if line.strip()]
    return random.choice(quotes)

def get_random_image(folder):
    files = os.listdir(folder)
    return os.path.join(folder, random.choice(files))

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()

    if user_id not in data:
        data[user_id] = {
            "name": update.effective_user.first_name,
            "checkin_streak": 0,
            "last_checkin_date": None,
            "hour": None,
            "minute": None,
            "pending_change": False
        }
        save_data(data)

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å? –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()

    if user_id in data:
        data[user_id]["hour"] = None
        data[user_id]["minute"] = None
        save_data(data)
        if scheduler.get_job(user_id):
            scheduler.remove_job(user_id)
        await update.message.reply_text("–¢—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤—å /start")

async def show_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    user = data.get(user_id)
    if user and user.get("hour") is not None and user.get("minute") is not None:
        await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî {user['hour']:02d}:{user['minute']:02d} –ø–æ –ú–°–ö.")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –µ–≥–æ.")

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/time ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    await update.message.reply_text(text)

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–†–ï–ú–ï–ù–ò ===
async def handle_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip()
    data = load_data()

    try:
        hour, minute = map(int, text.split(":"))
        if not (0 <= hour < 24 and 0 <= minute < 60):
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:30")
        return

    user = data.get(user_id)
    if user is None:
        return

    user["hour"] = hour
    user["minute"] = minute
    save_data(data)
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hour:02d}:{minute:02d} –ø–æ –ú–°–ö.")

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = load_data()

    action, user_id = query.data.split("|")
    user = data.get(user_id)
    today = datetime.now().date().isoformat()

    if not user:
        return

    if user.get("last_checkin_date") == today:
        await query.edit_message_reply_markup(reply_markup=None)
        return

    if action == "yes":
        user["checkin_streak"] += 1
        user["last_checkin_date"] = today
        save_data(data)

        image = get_random_image(IMG_GUTS)
        with open(image, 'rb') as img:
            await context.bot.send_photo(chat_id=query.message.chat_id, photo=img,
                                         caption=f"–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª—Å—è, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n\nüî• –°–µ—Ä–∏—è: {user['checkin_streak']} –¥–Ω–µ–π")
    elif action == "no":
        image = get_random_image(IMG_GRIFFITH)
        with open(image, 'rb') as img:
            await context.bot.send_photo(chat_id=query.message.chat_id, photo=img,
                                         caption="–Ø –≤–∏–∂—É, —á—Ç–æ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è—Ç—å —Ç—å–º–µ. –ü—Ä–∏—Ö–æ–¥–∏ –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.")

    await query.edit_message_reply_markup(reply_markup=None)

# === –ü–†–û–í–ï–†–ö–ê –ü–†–û–ü–£–©–ï–ù–ù–´–• –î–ù–ï–ô ===
async def daily_check():
    data = load_data()
    today = datetime.now().date()

    for user_id, user in data.items():
        last = user.get("last_checkin_date")
        if last and datetime.fromisoformat(last).date() < today - timedelta(days=1):
            user["checkin_streak"] = 0
            save_data(data)
            image = get_random_image(IMG_GRIFFITH)
            with open(image, 'rb') as img:
                await application.bot.send_photo(chat_id=int(user_id), photo=img,
                                                 caption="–¢–≤–æ–π –ø—É—Ç—å –ø—Ä–µ—Ä–≤–∞–ª—Å—è. –ù–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞. –û—Ç–ø—Ä–∞–≤—å /start.")

scheduler.add_job(lambda: asyncio.run(daily_check()), 'cron', hour=0, minute=5)

# === WEBHOOK ===
@web_app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    asyncio.run(application.process_update(update))
    return 'ok'

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
if __name__ == '__main__':
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("time", show_time))
    application.add_handler(CommandHandler("help", show_help))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫")
    asyncio.run(application.bot.set_webhook("https://berserk-bot-tmvg.onrender.com/" + BOT_TOKEN))
    web_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))